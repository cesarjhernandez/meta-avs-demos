From 0f8d64ee9211999af4d7e18740003bfcabffac0f Mon Sep 17 00:00:00 2001
From: Kshitij Sha <kshitij.shah@nxp.com>
Date: Mon, 8 Jan 2018 16:08:00 +0000
Subject: [PATCH] Add Dummy Key Word Detector

Dummy detector is used for DSP Concepts SW

Signed-off-by: Kshitij Sha <kshitij.shah@nxp.com>
Signed-off-by: Juan Gutierrez <juan.gutierrez@nxp.com>
---
 .../test/AudioInputProcessorIntegrationTest.cpp    |   2 +
 KWD/CMakeLists.txt                                 |   5 +
 KWD/Dummy/CMakeLists.txt                           |   6 +
 KWD/Dummy/include/Dummy/DummyKeywordDetector.h     | 143 ++++++++++++++
 KWD/Dummy/src/CMakeLists.txt                       |  13 ++
 KWD/Dummy/src/DummyKeywordDetector.cpp             | 220 +++++++++++++++++++++
 KWD/KWDProvider/src/CMakeLists.txt                 |   6 +-
 KWD/KWDProvider/src/KeywordDetectorProvider.cpp    |   9 +
 build/cmake/KeywordDetector.cmake                  |  10 +-
 9 files changed, 412 insertions(+), 2 deletions(-)
 create mode 100644 KWD/Dummy/CMakeLists.txt
 create mode 100644 KWD/Dummy/include/Dummy/DummyKeywordDetector.h
 create mode 100644 KWD/Dummy/src/CMakeLists.txt
 create mode 100644 KWD/Dummy/src/DummyKeywordDetector.cpp

diff --git a/Integration/test/AudioInputProcessorIntegrationTest.cpp b/Integration/test/AudioInputProcessorIntegrationTest.cpp
index 1ba99ea..5e2aae5 100644
--- a/Integration/test/AudioInputProcessorIntegrationTest.cpp
+++ b/Integration/test/AudioInputProcessorIntegrationTest.cpp
@@ -57,6 +57,8 @@
 #include "KittAi/KittAiKeyWordDetector.h"
 #elif KWD_SENSORY
 #include "Sensory/SensoryKeywordDetector.h"
+#elif KWD_DUMMY
+#include "Dummy/DummyKeywordDetector.h"
 #endif
 
 namespace alexaClientSDK {
diff --git a/KWD/CMakeLists.txt b/KWD/CMakeLists.txt
index ae12256..fcc094f 100644
--- a/KWD/CMakeLists.txt
+++ b/KWD/CMakeLists.txt
@@ -16,7 +16,12 @@ endif()
 if(SENSORY_KEY_WORD_DETECTOR)
     add_subdirectory("Sensory")
 endif()
+if(DUMMY_KEY_WORD_DETECTOR)
+    add_subdirectory("Dummy")
+endif()
 
 if(KWD)
     add_subdirectory("KWDProvider")
 endif()
+
+
diff --git a/KWD/Dummy/CMakeLists.txt b/KWD/Dummy/CMakeLists.txt
new file mode 100644
index 0000000..e1fca41
--- /dev/null
+++ b/KWD/Dummy/CMakeLists.txt
@@ -0,0 +1,6 @@
+cmake_minimum_required(VERSION 3.1 FATAL_ERROR)
+project(DUMMY LANGUAGES CXX)
+
+include(../../build/BuildDefaults.cmake)
+
+add_subdirectory("src")
diff --git a/KWD/Dummy/include/Dummy/DummyKeywordDetector.h b/KWD/Dummy/include/Dummy/DummyKeywordDetector.h
new file mode 100644
index 0000000..96c1d1e
--- /dev/null
+++ b/KWD/Dummy/include/Dummy/DummyKeywordDetector.h
@@ -0,0 +1,143 @@
+/*
+ * DummyKeywordDetector.h
+ *
+ * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *     http://aws.amazon.com/apache2.0/
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+#ifndef ALEXA_CLIENT_SDK_KWD_DUMMY_INCLUDE_KWD_DUMMY_KEY_WORD_DETECTOR_H_
+#define ALEXA_CLIENT_SDK_KWD_DUMMY_INCLUDE_KWD_DUMMY_KEY_WORD_DETECTOR_H_
+
+#include <atomic>
+#include <string>
+#include <thread>
+#include <memory>
+#include <mutex>
+#include <unordered_set>
+#include <boost/make_shared.hpp>
+
+#include <AVSCommon/Utils/AudioFormat.h>
+#include <AVSCommon/AVS/AudioInputStream.h>
+#include <AVSCommon/SDKInterfaces/KeyWordObserverInterface.h>
+#include <AVSCommon/SDKInterfaces/KeyWordDetectorStateObserverInterface.h>
+
+#include "KWD/AbstractKeywordDetector.h"
+
+namespace alexaClientSDK {
+namespace kwd {
+
+using namespace avsCommon;
+using namespace avsCommon::avs;
+using namespace avsCommon::sdkInterfaces;
+
+class DummyKeywordDetector : public AbstractKeywordDetector
+{
+public:
+    /**
+     * Creates a @c DummyKeywordDetector.
+     *
+     * @param stream The stream of audio data. This should be formatted in LPCM encoded with 16 bits per sample and
+     * have a sample rate of 16 kHz. Additionally, the data should be in little endian format.
+     * @param audioFormat The format of the audio data located within the stream.
+     * @param keyWordObservers The observers to notify of keyword detections.
+     * @param keyWordDetectorStateObservers The observers to notify of state changes in the engine.
+     * @param msToPushPerIteration The amount of data in milliseconds to push to Pryon at a time. Smaller sizes will
+     * lead to less delay but more CPU usage. Additionally, larger amounts of data fed into the engine per iteration
+     * might lead longer delays before receiving keyword detection events. This has been defaulted to 10 milliseconds
+     * as it is a good trade off between CPU usage and recognition delay. Additionally, this was the amount used by
+     * Pryon in example code.
+     * @return A new @c PryonKeywordDetector, or @c nullptr if the operation failed.
+     */
+    static std::unique_ptr<DummyKeywordDetector> create(
+        std::shared_ptr<AudioInputStream> stream,
+        avsCommon::utils::AudioFormat audioFormat,
+        std::unordered_set<std::shared_ptr<KeyWordObserverInterface>> keyWordObservers,
+        std::unordered_set<std::shared_ptr<KeyWordDetectorStateObserverInterface>> keyWordDetectorStateObservers,
+        std::chrono::milliseconds msToPushPerIteration = std::chrono::milliseconds(10));
+
+    /**
+     * Destructor.
+     */
+    ~DummyKeywordDetector() override;
+
+    
+
+private:
+    /**
+     * Constructor.
+     *
+     * @param stream The stream of audio data. This should be formatted in LPCM encoded with 16 bits per sample and
+     * have a sample rate of 16 kHz. Additionally, the data should be in little endian format.
+     * @param audioFormat The format of the audio data located within the stream.
+     * @param keyWordObservers The observers to notify of keyword detections.
+     * @param keyWordDetectorStateObservers The observers to notify of state changes in the engine.
+     * @param msToPushPerIteration The amount of data in milliseconds to push to Pryon at a time. Smaller sizes will
+     * lead to less delay but more CPU usage. Additionally, larger amounts of data fed into the engine per iteration
+     * might lead longer delays before receiving keyword detection events. This has been defaulted to 10 milliseconds
+     * as it is a good trade off between CPU usage and recognition delay. Additionally, this was the amount used by
+     * Pryon in example code.
+     */
+    DummyKeywordDetector(
+        std::shared_ptr<AudioInputStream> stream,
+        avsCommon::utils::AudioFormat audioFormat,
+        std::unordered_set<std::shared_ptr<KeyWordObserverInterface>> keyWordObservers,
+        std::unordered_set<std::shared_ptr<KeyWordDetectorStateObserverInterface>> keyWordDetectorStateObservers,
+        std::chrono::milliseconds msToPushPerIteration = std::chrono::milliseconds(10));
+
+    /**
+     * Initializes the stream reader, sets up the Pryon engine, and kicks off a thread to begin processing data from
+     * the stream. This function should only be called once with each new @c PryonKeywordDetector.
+     *
+     * @return @c true if the engine was initialized properly and @c false otherwise.
+     */
+    bool init();
+
+
+    /// The main function that reads data and feeds it into the engine.
+    void detectionLoop();
+
+    /// Indicates whether the internal main loop should keep running.
+    std::atomic<bool> m_isShuttingDown;
+
+
+    /// The stream of audio data.
+    const std::shared_ptr<avsCommon::avs::AudioInputStream> m_stream;
+
+    /// The reader that will be used to read audio data from the stream.
+    std::shared_ptr<avsCommon::avs::AudioInputStream::Reader> m_streamReader;
+
+    /**
+     * This serves as a reference point used when notifying observers of keyword detection indices since Pryon has no
+     * way of specifying a start index.
+     */
+    avsCommon::avs::AudioInputStream::Index m_beginIndexOfStreamReader;
+
+    /// Internal thread that reads audio from the buffer and feeds it to the Pryon engine.
+    std::thread m_detectionThread;
+
+    void initDetector();
+
+
+    /**
+     * The max number of samples to push into the underlying engine per iteration. This will be determined based on the
+     * sampling rate of the audio data passed in.
+     */
+    const size_t m_maxSamplesPerPush;
+ std::atomic<bool> m_isEngineSetup;
+
+};
+
+}  // namespace kwd
+}  // namespace alexaClientSDK
+
+#endif  // ALEXA_CLIENT_SDK_KWD_Dummy_INCLUDE_KWD_Dummy_KEY_WORD_DETECTOR_H_
diff --git a/KWD/Dummy/src/CMakeLists.txt b/KWD/Dummy/src/CMakeLists.txt
new file mode 100644
index 0000000..9f1a9af
--- /dev/null
+++ b/KWD/Dummy/src/CMakeLists.txt
@@ -0,0 +1,13 @@
+add_definitions("-DACSDK_LOG_MODULE=dummyKeywordDetector")
+add_library(DUMMY SHARED
+    DummyKeywordDetector.cpp
+)
+target_include_directories(DUMMY PUBLIC
+	"${KWD_SOURCE_DIR}/include" 
+	"${DUMMY_SOURCE_DIR}/include")
+
+target_link_libraries(DUMMY KWD AVSCommon)
+set_target_properties( DUMMY PROPERTIES COMPILE_FLAGS "-Wno-narrowing -Wno-sizeof-pointer-memaccess" )
+
+# install target
+asdk_install()
\ No newline at end of file
diff --git a/KWD/Dummy/src/DummyKeywordDetector.cpp b/KWD/Dummy/src/DummyKeywordDetector.cpp
new file mode 100644
index 0000000..f5adea0
--- /dev/null
+++ b/KWD/Dummy/src/DummyKeywordDetector.cpp
@@ -0,0 +1,220 @@
+/*
+ * DummyKeyWordDetector.cpp
+ *
+ * Copyright 2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
+ * Copyright NXP Semiconductors or its affiliates. All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License").
+ * You may not use this file except in compliance with the License.
+ * A copy of the License is located at
+ *
+ *     http://aws.amazon.com/apache2.0/
+ *
+ * or in the "license" file accompanying this file. This file is distributed
+ * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+ * express or implied. See the License for the specific language governing
+ * permissions and limitations under the License.
+ */
+
+#include <memory>
+#include <iterator>
+#include <linux/input.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <sys/socket.h>
+#include <stdlib.h>
+#include <netinet/in.h>
+#include <AVSCommon/Utils/Logger/Logger.h>
+#include <arpa/inet.h>
+#include "Dummy/DummyKeywordDetector.h"
+#include <string.h>
+
+namespace alexaClientSDK {
+namespace kwd {
+
+using namespace avsCommon::utils::logger;
+
+/// String to identify log entries originating from this file.
+static const std::string TAG("DummyKeywordDetector");
+
+/**
+ * Create a LogEntry using this file's TAG and the specified event string.
+ *
+ * @param The event string for this @c LogEntry.
+ */
+#define LX(event) alexaClientSDK::avsCommon::utils::logger::LogEntry(TAG, event)
+
+/// The number of hertz per kilohertz.
+static const size_t HERTZ_PER_KILOHERTZ = 1000;
+
+/// The timeout to use for read calls to the SharedDataStream.
+const std::chrono::milliseconds TIMEOUT_FOR_READ_CALLS = std::chrono::milliseconds(1000);
+
+std::unique_ptr<DummyKeywordDetector> DummyKeywordDetector::create(
+    std::shared_ptr<avsCommon::avs::AudioInputStream> stream,
+    avsCommon::utils::AudioFormat audioFormat,
+    std::unordered_set<std::shared_ptr<avsCommon::sdkInterfaces::KeyWordObserverInterface>> keyWordObservers,
+    std::unordered_set<std::shared_ptr<avsCommon::sdkInterfaces::KeyWordDetectorStateObserverInterface>>
+        keyWordDetectorStateObservers,
+    std::chrono::milliseconds msToPushPerIteration) {
+
+    if (!stream) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "nullStream"));
+        return nullptr;
+    }
+
+    if (isByteswappingRequired(audioFormat)) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "endianMismatch"));
+        return nullptr;
+    }
+
+    std::unique_ptr<DummyKeywordDetector> detector(new DummyKeywordDetector(
+        stream,
+        audioFormat,
+        keyWordObservers,
+        keyWordDetectorStateObservers,
+        msToPushPerIteration));
+
+    if (!detector->init()) {
+        ACSDK_ERROR(LX("createFailed").d("reason", "initDetectorFailed"));
+        return nullptr;
+    }
+
+    return detector;
+}
+
+DummyKeywordDetector::~DummyKeywordDetector() {
+
+    m_isShuttingDown = true;
+    if (m_detectionThread.joinable()) {
+        m_detectionThread.join();
+    }
+
+}
+
+DummyKeywordDetector::DummyKeywordDetector(
+    std::shared_ptr<AudioInputStream> stream,
+    avsCommon::utils::AudioFormat audioFormat,
+    std::unordered_set<std::shared_ptr<KeyWordObserverInterface>> keyWordObservers,
+    std::unordered_set<std::shared_ptr<KeyWordDetectorStateObserverInterface>> keyWordDetectorStateObservers,
+    std::chrono::milliseconds msToPushPerIteration) :
+        AbstractKeywordDetector(keyWordObservers, keyWordDetectorStateObservers),
+        m_stream{stream},
+        m_maxSamplesPerPush{(audioFormat.sampleRateHz / HERTZ_PER_KILOHERTZ) * msToPushPerIteration.count()},
+        m_isEngineSetup{false} {
+}
+
+bool DummyKeywordDetector::init() {
+
+    m_streamReader = m_stream->createReader(AudioInputStream::Reader::Policy::BLOCKING);
+    if (!m_streamReader) {
+        ACSDK_ERROR(LX("initFailed").d("reason", "createStreamReaderFailed"));
+        return false;
+    }
+
+    //initDetector();
+    m_isShuttingDown = false;
+    m_detectionThread = std::thread(&DummyKeywordDetector::detectionLoop, this);
+
+    return true;
+}
+
+
+void DummyKeywordDetector::detectionLoop() {
+
+    int16_t audioDataToPush[m_maxSamplesPerPush];
+    ssize_t wordsRead;
+     int sock = 0, valread;                                                                                          
+    struct sockaddr_in serv_addr;                                                                                   
+    char buffer[512] = {0};                                                                                         
+    char snd_buffer[] = "get_value,BothWW.value\n";                                                                 
+    int count = 0;                                                                                                  
+    char *tmp = NULL;                                                                                               
+    int port = 15007;                                                                                               
+    int local_count = 0;                                                                                            
+    char keyword[] = "alexa";           
+    notifyKeyWordDetectorStateObservers(KeyWordDetectorStateObserverInterface::KeyWordDetectorState::ACTIVE);
+    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)                                                               
+    {                                                                                                               
+        ACSDK_WARN(LX(" Socket creation error "));                                                                  
+    }                                                                                                               
+                                                                                                                    
+    memset(&serv_addr, '0', sizeof(serv_addr));                                                                     
+                                                                                                                 
+    serv_addr.sin_family = AF_INET;                                                                              
+    serv_addr.sin_port = htons(port);                                                                            
+      //printf("PORT is %d\n",PORT);                                                                             
+    // Convert IPv4 and IPv6 addresses from text to binary form                                                  
+    if(inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr)<=0)                                                  
+    {                                                                                                            
+        ACSDK_WARN(LX("Invalid address/ Address not supported "));                                               
+                                                                                                                 
+    }                                                                                                               
+                                                                                                             
+    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)                                 
+    {                                                                                                        
+        ACSDK_WARN(LX("Connection Failed \n"));                                                              
+    }                                                                                                        
+    ACSDK_WARN(LX("Sending first command"));                                                                     
+    send(sock , snd_buffer , strlen(snd_buffer) , 0 );                                                           
+    valread = read( sock , buffer, 512);                                                                     
+    ACSDK_WARN(LX("Debug").d("buff",buffer)); 
+    tmp = strtok(buffer, ",");                                                                                       
+    while(tmp != NULL)                                                                                      
+    {                                                                                                       
+      if(!strncmp(tmp, "float", sizeof(tmp)))                                                              
+      {                                                                                                    
+        tmp = strtok(NULL, ",");                                                                           
+        break;                                                                                             
+      }                                                                                                    
+      tmp = strtok(NULL, ",");                                                                             
+    }                                                                                                             
+    //tmp = &buffer[22];                                                                                               
+    ACSDK_WARN(LX("Debug").d("tmp",tmp));                                                                        
+    count = atoi(tmp);                                                                                           
+    local_count = count;                                                                                         
+    ACSDK_WARN(LX("count").d("count",count));                                                 
+    ACSDK_WARN(LX("local_count").d("local_count",local_count));
+    while (!m_isShuttingDown) {
+        bool didErrorOccur;
+        wordsRead = readFromStream(
+            m_streamReader, m_stream, audioDataToPush, m_maxSamplesPerPush, TIMEOUT_FOR_READ_CALLS, &didErrorOccur);
+
+        if (didErrorOccur) {
+            break;
+        } else if (wordsRead > 0) {
+            if(send(sock , snd_buffer , strlen(snd_buffer) , 0 ) == -1)                                             
+               ACSDK_WARN(LX("Send command failed"));                                                                
+             valread = read( sock , buffer, 512);                                                                    
+             if(valread == -1)ACSDK_WARN(LX("Receive response failed"));  
+             tmp = strtok(buffer, ",");
+             while(tmp != NULL)                                                                                      
+             {                                                                                                       
+               if(!strncmp(tmp, "float", sizeof(tmp)))                                                              
+               {                                                                                                    
+                 tmp = strtok(NULL, ",");                                                                           
+                 break;                                                                                             
+               }                                                                                                    
+               tmp = strtok(NULL, ",");                                                                             
+             }                                                        
+             //tmp = &buffer[22];                
+             if(tmp != NULL)                                                                      
+               count = atoi(tmp);                                                                                      
+              //ACSDK_WARN(LX("count").d("count",count));                                                            
+             if(count > local_count){                                                                                
+                ACSDK_WARN(LX("Keyword detected from our code"));                                                    
+                ACSDK_WARN(LX("count").d("count",count));                                                            
+                ACSDK_WARN(LX("local_count").d("local_count",local_count));                                          
+                local_count = count;                                                                                 
+                notifyKeyWordObservers(                                                                              
+                        m_stream,                                                                                    
+                        keyword,                                                                             
+                        KeyWordObserverInterface::UNSPECIFIED_INDEX,                                                
+                        m_streamReader->tell());                                                             
+             }                                           
+        }
+    }
+}
+
+}  // namespace kwd
+}  // namespace alexaClientSDK
diff --git a/KWD/KWDProvider/src/CMakeLists.txt b/KWD/KWDProvider/src/CMakeLists.txt
index 207abe7..b585f54 100644
--- a/KWD/KWDProvider/src/CMakeLists.txt
+++ b/KWD/KWDProvider/src/CMakeLists.txt
@@ -14,5 +14,9 @@ if(KITTAI_KEY_WORD_DETECTOR)
     target_link_libraries(KeywordDetectorProvider KITTAI)
 endif()
 
+if(DUMMY_KEY_WORD_DETECTOR)
+    target_link_libraries(KeywordDetectorProvider DUMMY)
+endif()
+
 # install target
-asdk_install()
\ No newline at end of file
+asdk_install()
diff --git a/KWD/KWDProvider/src/KeywordDetectorProvider.cpp b/KWD/KWDProvider/src/KeywordDetectorProvider.cpp
index a25756c..277f7b0 100644
--- a/KWD/KWDProvider/src/KeywordDetectorProvider.cpp
+++ b/KWD/KWDProvider/src/KeywordDetectorProvider.cpp
@@ -19,6 +19,8 @@
 #include <KittAi/KittAiKeyWordDetector.h>
 #elif KWD_SENSORY
 #include <Sensory/SensoryKeywordDetector.h>
+#elif KWD_DUMMY
+#include <Dummy/DummyKeywordDetector.h>
 #endif
 
 #ifdef KWD_KITTAI
@@ -60,6 +62,13 @@ std::unique_ptr<kwd::AbstractKeywordDetector> KeywordDetectorProvider::create(
         keyWordObservers,
         keyWordDetectorStateObservers,
         pathToInputFolder + "/spot-alexa-rpi-31000.snsr");
+
+#elif defined(KWD_DUMMY)
+     return kwd::DummyKeywordDetector::create(
+         stream,
+         audioFormat,
+         keyWordObservers,
+         keyWordDetectorStateObservers);
 #else
     return nullptr;
 #endif
diff --git a/build/cmake/KeywordDetector.cmake b/build/cmake/KeywordDetector.cmake
index 1594c51..a574a32 100644
--- a/build/cmake/KeywordDetector.cmake
+++ b/build/cmake/KeywordDetector.cmake
@@ -25,8 +25,9 @@ option(AMAZONLITE_KEY_WORD_DETECTOR "Enable AmazonLite keyword detector." OFF)
 option(AMAZONLITE_KEY_WORD_DETECTOR_DYNAMIC_MODEL_LOADING "Enable AmazonLite keyword detector dynamic model loading." OFF)
 option(KITTAI_KEY_WORD_DETECTOR "Enable KittAi keyword detector." OFF)
 option(SENSORY_KEY_WORD_DETECTOR "Enable Sensory keyword detector." OFF)
+option(DUMMY_KEY_WORD_DETECTOR "Enable Dummy keyword detector." OFF)
 
-if(NOT AMAZON_KEY_WORD_DETECTOR AND NOT AMAZONLITE_KEY_WORD_DETECTOR AND NOT KITTAI_KEY_WORD_DETECTOR AND NOT SENSORY_KEY_WORD_DETECTOR)
+if(NOT AMAZON_KEY_WORD_DETECTOR AND NOT AMAZONLITE_KEY_WORD_DETECTOR AND NOT KITTAI_KEY_WORD_DETECTOR AND NOT SENSORY_KEY_WORD_DETECTOR AND NOT DUMMY_KEY_WORD_DETECTOR)
     message("No keyword detector type specified, skipping build of keyword detector.")
     return()
 endif()
@@ -89,3 +90,10 @@ if(SENSORY_KEY_WORD_DETECTOR)
     add_definitions(-DKWD_SENSORY)
     set(KWD ON)
 endif()
+
+if(DUMMY_KEY_WORD_DETECTOR)
+    message("Creating ${PROJECT_NAME} with keyword detector type: Dummy")
+    add_definitions(-DKWD)
+    add_definitions(-DKWD_DUMMY)
+    set(KWD ON)
+endif()
-- 
1.9.1

